/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The type of part.
 */
export const Type = {
  Arm: "arm",
  Leg: "leg",
  Sensor: "sensor",
  Processor: "processor",
  Mobility: "mobility",
  PowerSource: "power_source",
} as const;
/**
 * The type of part.
 */
export type Type = ClosedEnum<typeof Type>;

export type Part = {
  /**
   * Unique identifier of the part.
   */
  partId: string;
  /**
   * The type of part.
   */
  type: Type;
  /**
   * The name of the part.
   */
  name: string;
  /**
   * Quantity of the part.
   */
  quantity: number;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Part$inboundSchema: z.ZodType<Part, z.ZodTypeDef, unknown> = z
  .object({
    partId: z.string(),
    type: Type$inboundSchema,
    name: z.string(),
    quantity: z.number().int(),
  });

/** @internal */
export type Part$Outbound = {
  partId: string;
  type: string;
  name: string;
  quantity: number;
};

/** @internal */
export const Part$outboundSchema: z.ZodType<Part$Outbound, z.ZodTypeDef, Part> =
  z.object({
    partId: z.string(),
    type: Type$outboundSchema,
    name: z.string(),
    quantity: z.number().int(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Part$ {
  /** @deprecated use `Part$inboundSchema` instead. */
  export const inboundSchema = Part$inboundSchema;
  /** @deprecated use `Part$outboundSchema` instead. */
  export const outboundSchema = Part$outboundSchema;
  /** @deprecated use `Part$Outbound` instead. */
  export type Outbound = Part$Outbound;
}
