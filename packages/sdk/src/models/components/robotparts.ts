/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  Part,
  Part$inboundSchema,
  Part$Outbound,
  Part$outboundSchema,
} from "./part.js";

export type RobotParts = {
  /**
   * Unique identifier of the robot.
   */
  robotId: string;
  parts: Array<Part>;
};

/** @internal */
export const RobotParts$inboundSchema: z.ZodType<
  RobotParts,
  z.ZodTypeDef,
  unknown
> = z.object({
  robotId: z.string(),
  parts: z.array(Part$inboundSchema),
});

/** @internal */
export type RobotParts$Outbound = {
  robotId: string;
  parts: Array<Part$Outbound>;
};

/** @internal */
export const RobotParts$outboundSchema: z.ZodType<
  RobotParts$Outbound,
  z.ZodTypeDef,
  RobotParts
> = z.object({
  robotId: z.string(),
  parts: z.array(Part$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RobotParts$ {
  /** @deprecated use `RobotParts$inboundSchema` instead. */
  export const inboundSchema = RobotParts$inboundSchema;
  /** @deprecated use `RobotParts$outboundSchema` instead. */
  export const outboundSchema = RobotParts$outboundSchema;
  /** @deprecated use `RobotParts$Outbound` instead. */
  export type Outbound = RobotParts$Outbound;
}
